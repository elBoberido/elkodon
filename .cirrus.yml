#
# Notes
#
# Cirrus CI has a concurrency limit of 24 CPU cores for open source projects.
# This means we should not have more than 12 pipelines with more than 2 CPUs
# in each pipeline running parallel
#
# Documentation:
# - https://cirrus-ci.org/examples/
# - https://cirrus-ci.org/guide/writing-tasks/
#

---

#
# Templates
#

# Constants

elk_task_timeout_template: &ELK_TASK_TIMEOUT
  timeout_in: 30m  # This needs to be reasonable large in order not to run in a timeout in the docker image re-builds

elk_common_cpu_and_memory_config_for_build_and_test_template: &ELK_COMMON_CPU_AND_MEMORY_CONFIG_FOR_BUILD_AND_TEST
  cpu: 2
  memory: 4GB

# Container

elk_container_ubuntu_22_04_x64_template: &ELK_CONTAINER_UBUNTU_22_04_X64
  <<: *ELK_TASK_TIMEOUT
  container:
    dockerfile: internal/docker/ubuntu-22.04
    <<: *ELK_COMMON_CPU_AND_MEMORY_CONFIG_FOR_BUILD_AND_TEST

elk_container_ubuntu_22_04_aarch64_template: &ELK_CONTAINER_UBUNTU_22_04_AARCH64
  <<: *ELK_TASK_TIMEOUT
  arm_container:
    dockerfile: internal/docker/ubuntu-22.04
    <<: *ELK_COMMON_CPU_AND_MEMORY_CONFIG_FOR_BUILD_AND_TEST

elk_container_arch_linux_x64_template: &ELK_CONTAINER_ARCH_LINUX_X64
  <<: *ELK_TASK_TIMEOUT
  container:
    dockerfile: internal/docker/archlinux-base-devel
    <<: *ELK_COMMON_CPU_AND_MEMORY_CONFIG_FOR_BUILD_AND_TEST

elk_container_windows_server_2019_x64_template: &ELK_CONTAINER_WINDOWS_SERVER_2019_X64
  <<: *ELK_TASK_TIMEOUT
  windows_container:
    dockerfile: internal/docker/windowsservercore-2019
    <<: *ELK_COMMON_CPU_AND_MEMORY_CONFIG_FOR_BUILD_AND_TEST

elk_container_freebsd_x64_template: &ELK_CONTAINER_FREEBSD_X64
  <<: *ELK_TASK_TIMEOUT
  freebsd_instance:
    image_family: freebsd-13-2
    <<: *ELK_COMMON_CPU_AND_MEMORY_CONFIG_FOR_BUILD_AND_TEST

# Build and Test

elk_common_build_debug_template: &ELK_COMMON_BUILD_DEBUG
  build_script: cargo build --workspace --all --examples --benches

elk_common_build_and_test_debug_template: &ELK_COMMON_BUILD_AND_TEST_DEBUG
  <<: *ELK_COMMON_BUILD_DEBUG
  doc_script: cargo doc
  test_script: cargo test --workspace --all

elk_common_build_release_template: &ELK_COMMON_BUILD_RELEASE
  build_script: cargo build --release --workspace --all --examples --benches

elk_common_build_and_test_release_template: &ELK_COMMON_BUILD_AND_TEST_RELEASE
  <<: *ELK_COMMON_BUILD_RELEASE
  doc_script: cargo doc --release
  test_script: cargo test --release --workspace --all

#
# Preflight-Check with Ubuntu x86 stable debug
#

preflight_check_task:
  <<: *ELK_CONTAINER_UBUNTU_22_04_X64
  set_toolchain_script: rustup default stable
  # TODO elk-#8: add more preflight-checks here
  <<: *ELK_COMMON_BUILD_DEBUG # only build without tests to not slow down other tasks due to flaky tests

#
# Ubuntu x86
#

# Pipeline 1

# TODO elk-#8: Add code coverage
# ubuntu_22_04_x64_stable_debug_coverage_task:
#   depends_on: preflight_check
#   <<: *ELK_CONTAINER_UBUNTU_22_04_X64
#   set_toolchain_script: rustup default stable
#   <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

# Pipeline 2

ubuntu_22_04_x64_stable_debug_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_UBUNTU_22_04_X64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

ubuntu_22_04_x64_beta_debug_task:
  depends_on: ubuntu_22_04_x64_stable_debug
  <<: *ELK_CONTAINER_UBUNTU_22_04_X64
  set_toolchain_script: rustup default beta
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

ubuntu_22_04_x64_nightly_debug_task:
  depends_on: ubuntu_22_04_x64_beta_debug
  allow_failures: true
  <<: *ELK_CONTAINER_UBUNTU_22_04_X64
  set_toolchain_script: rustup default nightly
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

# Pipeline 3

ubuntu_22_04_x64_stable_release_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_UBUNTU_22_04_X64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_RELEASE

#
# Ubuntu aarch64
#

# Pipeline 4

ubuntu_22_04_aarch64_stable_debug_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_UBUNTU_22_04_AARCH64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

ubuntu_22_04_aarch64_beta_debug_task:
  depends_on: ubuntu_22_04_aarch64_stable_debug
  allow_failures: true
  <<: *ELK_CONTAINER_UBUNTU_22_04_AARCH64
  set_toolchain_script: rustup default beta
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

# Pipeline 5

ubuntu_22_04_aarch64_stable_release_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_UBUNTU_22_04_AARCH64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_RELEASE

#
# Arch Linux x86
#

# Pipeline 6

arch_linux_x64_stable_debug_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_ARCH_LINUX_X64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

arch_linux_x64_beta_debug_task:
  depends_on: arch_linux_x64_stable_debug
  <<: *ELK_CONTAINER_ARCH_LINUX_X64
  set_toolchain_script: rustup default beta
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

# Pipeline 7

arch_linux_x64_stable_release_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_ARCH_LINUX_X64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_RELEASE

#
# Windows Server 2019 x86
#

# Pipeline 8

windows_server_2019_x64_stable_debug_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_WINDOWS_SERVER_2019_X64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG

windows_server_2019_x64_stable_release_task:
  depends_on: windows_server_2019_x64_stable_debug
  <<: *ELK_CONTAINER_WINDOWS_SERVER_2019_X64
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_RELEASE

#
# FreeBSD
#

# Pipeline 9

freebsd_x64_stable_debug_task:
  depends_on: preflight_check
  <<: *ELK_CONTAINER_FREEBSD_X64
  env:
    PATH: /root/.cargo/bin:$PATH
    HOME: /root  # must be set manually to '/root' or 'rustup' will throw an error
  setup_script:
    - pkg install -y git llvm
    - pw useradd testuser1
    - pw useradd testuser2
    - pw groupadd testgroup1
    - pw groupadd testgroup2
    - mkdir -p /mnt/mqueue/
    - mount -t mqueuefs null /mnt/mqueue/
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --no-modify-path
    - rustup component add clippy rustfmt
  set_toolchain_script: rustup default stable
  <<: *ELK_COMMON_BUILD_AND_TEST_DEBUG
